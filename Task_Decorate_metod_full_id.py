class Student3():
    def __init__(self, name, id):
        self.name = name
        self.id = id




    def get_name(self):
        return self.name

#Если возникает потребность преобразовать все такие атрибуты в метод и изменить атрибуты в вызовы методов, то
#проще сделать это с помощью декоратора @property

# можно будет получать новые значени full_id при изменении self.name или self.id = id, воспользовавшись декоратором
# т.е. можно писать s.full_id без дополнительных круглых скобок
    # Декоратор свойств @property маскирует метод и обрабатывает так, как будто это свойство класса
    @property
    def full_id(self):
        return self.name + " - " + str(self.id)

# Однако @property позволяет только прочитать данные и не позволяет вносить изменения. Чтобы вносить изменения,
#необходимо добавить декоратор для full_id с помощью метода setter
#full_id.setter унаследует все, что есть в исходном full_id, поэтому мы можем добавить его напрямую






s = Student3("Amit", 10)
print(s.name)
print(s.id)
print(s.full_id)

#Добавим новое имя и айди, выведем полученный результат

s.name = "Vasilii"
s.id = 32
print(s.name)
print(s.id)
print(s.full_id)

#Можно заметить, что с помощью метода у нас обновляется значение full_id